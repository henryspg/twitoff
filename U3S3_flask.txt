

from flask import Flask
app = Flask(__name__)


@app.route('/')
def hello_world():
    return "Hello, World! <br>This is Henry Gultom's first web dev. <br>I'm excited to develop more"

if __name__ == '__main__':
    app.run()



 export FLASK_APP=app.py


# to setup debug mode, no need to restart again n again
set FLASK_DEBUG = 1

flask run



#############################################################################################
From lecture 8/17
#############################################

on twitr directory:

pipenv
and 
pipenv shell

or ...

"pipenv run python app.py"  ...  it will activate  & run app.py in the env


NOte from    http://witkowskibartosz.com/blog/pipenv_run_vs_pipenv_shell.html

"Pipenv shell" is used mainly as a run it now, and leave.

"Pipenv run" is the main purpose for running next python commands. 
It will automatically activate environment for that command and execute anything you will put to it.



Check env for python 3.8
pipenv --python 3.8  


Launch subshell in virtual environment

pipenv shell

make a twitoff directory. later on flask, atc...
mkdir twitoff


create new file  twitoff.py  in twitoff directory


to run twitoff.py  I MUST be in the pipenv when I installed FLASK




make nw directory  
hello.py
touch __init__.py   ## what is in it??   

run the flask, if u r in vim or  maybe BASH::
FLASK_APP=twitoff flask run ##  or
FLASK_APP=twitoff:APP flask run
     Error: module 'twitoff' has no attribute 'APP'. 
	error is because Anaconda has different syntax


If I run on ANACONDA env, run the command in 2 steps, like this:
set FLASK_APP=twitoff
and
flask run

###############  GREAT  after using "pipenv run python app.py" ##################


to run the py-file,  make sure you have these 2 commands in the pwd:
pipenv shell
pip install flask


to check what is in  __init__.py::
cat twitoff/ __init__.py


what is SQLAlchemy?  it s a python pkg that connects us to DB, that run SQL, without us having to write sQL by ourself.
We use it toinstantiate Dbase

DB.SQLAlchemy()   is valid for all dbase: SQL & PG


for dubugging the flask, run:
FLASK_APP=twitoff:APP flask shell


or
set FLASK_APP=twitoff
and 
flask shell      # to open a shell


flask shell is: 
*To explore the data in your application, you can start an interactive Python shell with the shell command. An application context will be active, and the app instance will be imported.
* starts the appl  then drop u into a python repr and let u interact with it programmatically. 

flask run is: u start the appl at the server and u load it in ur web browser  as if u r using Web App.


>>> from Twitoff.models import User
>>> User

>>> from Twitoff.models import User, Tweet


austen = User(id=1, name='austen')
elon = User(id=2, name='elonmusk')
oliver = User(id=3, name='JohnOliver')
conaw = User(id=4, name='Conaw')
kanye = User(id=5, name='kanyewest')
obama = User(id=6, name='BarackObama')



tweet = Tweet(id=1, text ='Lambda Beta gama')
austen.tweets.append(tweet)

tweet = Tweet(id=2, text ='TESLA is cool')
elon.tweets.append(tweet)

tweet = Tweet(id=6, text ='Change is possible')
obama.tweets.append(tweet)

tweet = Tweet(id=5, text ="Let's sing yall !!!")
kanye.tweets.append(tweet)




####################################   8/18   ############################################

as ystrdy
....
pipenv install tweepy basilica python-dotenv






>>> import tweepy
>>> auth = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET_KEY)
>>> twitter = tweepy.API(auth)
>>> user = 'KingJames'
>>> twitter_user = twitter.get_user(user)


tweets = twitter_user.timeline(count=200, exclude_replies=True, include_rts=False, tweet_mode='Extended')

go to:
twitter.py

TWITTER_USERS = ['calebhicks', 'elonmusk', 'rrherr', 'SteveMartinToGo',
                 'alyankovic', 'nasa', 'sadserver', 'jkhowland', 'austen',
                 'common_squirrel', 'KenJennings', 'conanobrien',
                 'big_ben_clock', 'IAM_SHAKESPEARE']



current state:
"""Retrieve Tweets, embeddings, and persist in the database."""
import basilica
import tweepy
from .models import DB, Tweet, User
TWITTER_USERS = ['calebhicks', 'elonmusk', 'rrherr', 'SteveMartinToGo',
                 'alyankovic', 'nasa', 'sadserver', 'jkhowland', 'austen',
                 'common_squirrel', 'KenJennings', 'conanobrien',
                 'big_ben_clock', 'IAM_SHAKESPEARE']
# TODO don't have raw secrets in the code, move to .env!
TWITTER_AUTH = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET_KEY)
TWITTER = tweepy.API(TWITTER_AUTH)
def add_or_update_user(username):
    """Add or update a user and their Tweets, error if not a Twitter user."""
    twitter_user = TWITTER.get_user(username)
    db_user = (User.query.get(twitter_user.id) or
               User(id=twitter_user.id, name=username))
    DB.session.add(db_user)
    # Lets get the tweets - focusing on primary (not retweet/reply)
    tweets = twitter_user.timeline(
        count=200, exclude_replies=True, include_rts=False,
        tweet_mode='extended'
    )
    for tweet in tweets:
        db_tweet = Tweet(id=tweet.id, text=tweet.full_text[:300])
        db_user.tweets.append(db_tweet)
        DB.session.add(db_tweet)
    DB.session.commit()





(twitoff) bash-3.2$ FLASK_APP=twitoff flask shell
Python 3.6.10 |Anaconda, Inc.| (default, Mar 23 2020, 17:45:12) 
[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin
App: twitoff.app [production]
Instance: /Users/aaron/unit3/twitoff/instance
>>> from twitoff.twitter import add_or_update_user
>>> from twitoff.models import User
>>> User.query.all()
[-User austen-, -User elonmusk-]
>>> add_or_update_user('kingjames')
>>> User.query.all()
[-User austen-, -User elonmusk-, -User kingjames-]
>>> user = User.query.get(1)
>>> user
-User austen-
>>> user1 = User.query.get(1)
>>> User.query.filter(User.name == 'kingjames')
<flask_sqlalchemy.BaseQuery object at 0x7f7fdf2c9320>
>>> User.query.filter(User.name == 'kingjames').one()
-User kingjames-
>>> # SELECT * FROM users WHERE name = 'kingjames' limit 1
>>> user2 = User.query.filter(User.name == 'kingjames').one()
>>> user2
-User kingjames-
>>> len(user2.tweets)
137
>>> user2.tweets[0]
-Tweet Man that was BOGUS AS HELL MAN!!!!! Cmon man. :man-facepalming::skin-tone-5:-
>>> 


###########  we dont need to add anything to init.py ######################












#############################
1st: 
pipenv shell

from Twitoff.models import User   ## case sensitive

from Twitoff.app import *

dir()

exit

FLASK_APP =Twitoff  flask shell         or  2x



$ FLASK_APP = Twitoff flask shell
bash: FLASK_APP: command not found   .... ??


for conda:
set FLASK_APP = Twitoff
flask shell


Error: Could not locate a Flask application. You did not provide the "FLASK_APP" environment variable, and a "wsgi.py" or "app.py" module was not found in the current directory.

solution: I WAS on WRONG DIRECTORY.  should go to /Twitoff/.. :-( 




Id I am on directory   under 
c/MyLearning/23-LSDS/03B-LSDS17 Unit3/U3S3_twitoff/
pipenv shell
python
>>> from Twitoff.app import *
>>> dir()

result: 
['Flask', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'create_app', 'render_template']


where are :  "models"  "DB",  "APP"  "User" ....  ??


>>> dir(create_app)
['__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']



>>> dir(render_template)
['__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
>>> 

































